package api;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.junit.BeforeClass;
import org.junit.Test;

import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.http.ContentType;
import io.restassured.specification.ResponseSpecification;

public class TestCrudAction1 {
	




	@BeforeClass
//	public static void setUpBeforeClass() throws Exception {
//		ResponseSpecification respSpec = 
//				new ResponseSpecBuilder().
//				expectStatusCode(200).
//				expectContentType(ContentType.JSON).
//				addFilters(Arrays.asList(new ResponseLoggingFilter())).
//				build();
//	}

	
	@Test
	
		public static void createNewUserAndPostVerifyDelete() {
		
		private final String TOKEN = "0e2c19917d53f7aff9ea081922569f3c8322c131d1675556641b5de5a9ce88e5";
		private final String URL = "https://gorest.co.in/";

			String userName = "UserName" + new Random().nextInt(10000);
			String userEmail = "useremail_" + new Random().nextInt(10000) + "@email.com";

			
			String endpointPostUser = "public-api/users";
			
			Map user = new HashMap<>();
			user.put("name", userName);
			user.put("email", userEmail);
			user.put("gender", "Female");
			user.put("status", "Active");
			
			// Create new user
			int userId = given(). 
				auth().  
				oauth2(TOKEN). 
				contentType(ContentType.JSON). 
				body(user).  
				log().all().
			when().
				post(URL + endpointPostUser). 
			then(). 
				assertThat().
			
//				body("code", is(201)). 
				log().all().extract().
				path("data.id");
			
			

			
			String title = "TestTitle";
			String message = "Message text 123";
		
			Map data = new HashMap<>();
			data.put("title", title);
			data.put("body", message);
			
		
			
			String endpointPostUserPost = "public-api/users/{userId}/posts/";
			
			given().
			pathParam("userId", userId). 
			auth().  
			oauth2(TOKEN). 
			contentType(ContentType.JSON). 
			body(data).  

			log().all().
		when().
			post(URL + endpointPostUserPost).
		then(). 
			assertThat().
			
//			body("code", is(201)).
			log().all();
		
		
		// check if title is correct 	
			given().
			pathParam("userId", userId). 
			auth().  
			oauth2(TOKEN). 
			contentType(ContentType.JSON). 
			body(data).  

			log().all().
		when().
			get(URL + endpointPostUserPost).
		then(). 
			assertThat().
//			body("title", is(title)).
//			body("code", is(201)).
			log().all();
			
			
			
	// delete post
			
			given().
			pathParam("userId", userId). 
			auth().  
			oauth2(TOKEN). 
			contentType(ContentType.JSON). 
			body(data).  

			log().all().
		when().
			delete(URL + endpointPostUserPost).
		then(). 
			assertThat().
			
//			body("code", is(201)).
			log().all();
			
			
	// check if post don't exist
			given().
			pathParam("userId", userId). 
			auth().  
			oauth2(TOKEN). 
			contentType(ContentType.JSON). 
			body(data).  

			log().all().
		when().
			get(URL + endpointPostUserPost).
		then(). 
			
			assertThat().
//			body("code", is(201)).
			body("title", is("Resource not found")).
			log().all();
			
			
			
		}
			



}
